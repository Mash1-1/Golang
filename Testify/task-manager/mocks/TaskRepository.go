// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	Domain "task_manager_ca/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: new_task
func (_m *TaskRepository) CreateTask(new_task Domain.Task) error {
	ret := _m.Called(new_task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Domain.Task) error); ok {
		r0 = rf(new_task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskRepository) DeleteTask(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllElements provides a mock function with no fields
func (_m *TaskRepository) GetAllElements() ([]Domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllElements")
	}

	var r0 []Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTasks provides a mock function with no fields
func (_m *TaskRepository) GetAllTasks() ([]Domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: id
func (_m *TaskRepository) GetTaskByID(id string) (Domain.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Domain.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) Domain.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskByID provides a mock function with given fields: id, updatedTask
func (_m *TaskRepository) UpdateTaskByID(id string, updatedTask Domain.Task) error {
	ret := _m.Called(id, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, Domain.Task) error); ok {
		r0 = rf(id, updatedTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
